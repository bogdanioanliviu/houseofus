apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-alloy-configmap
  namespace: grafana-alloy
  labels:
    app: grafana-alloy
data:
  config.alloy: |
    logging {
      level  = "info"
      format = "logfmt"
    }
    
    discovery.kubernetes "nodes" {
      role = "node"
    }
    
    discovery.kubernetes "services" {
      role = "service"
    }
    
    discovery.kubernetes "endpoints" {
      role = "endpoints"
    }
    
    discovery.kubernetes "endpointslices" {
      role = "endpointslice"
    }

    discovery.kubernetes "ingresses" {
      role = "ingress"
    }
    
    discovery.kubernetes "kubernetes_pods_name" {
      role = "pod"
    }
    
    discovery.relabel "kubernetes_pods_name" {
      targets = discovery.kubernetes.kubernetes_pods_name.targets

      rule {
        source_labels = ["__meta_kubernetes_pod_controller_name"]
        regex         = "([0-9a-z-.]+?)(-[0-9a-f]{8,10})?"
        target_label  = "__tmp_controller_name"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__tmp_controller_name", "__meta_kubernetes_pod_name"]
        regex         = "^;*([^;]+)(;.*)?$"
        target_label  = "app"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component", "__meta_kubernetes_pod_label_component"]
        regex         = "^;*([^;]+)(;.*)?$"
        target_label  = "component"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        target_label  = "node_name"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }

      rule {
        source_labels = ["namespace", "app"]
        separator     = "/"
        target_label  = "job"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        target_label  = "__path__"
        replacement   = "/var/log/pods/*$1/*.log"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash", "__meta_kubernetes_pod_annotation_kubernetes_io_config_hash", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        regex         = "true/(.*)"
        target_label  = "__path__"
        replacement   = "/var/log/pods/*$1/*.log"
      }
    }
    
    local.file_match "kubernetes_pods_name" {
      path_targets = discovery.relabel.kubernetes_pods_name.output
    }
    
    loki.process "kubernetes_pods_name" {
      forward_to = [loki.write.default.receiver]
      stage.cri { }
      stage.drop {
        expression = ".*POST /api/v2/write\\?.*"
      }
    }
    
    loki.source.file "kubernetes_pods_name" {
      targets               = local.file_match.kubernetes_pods_name.targets
      forward_to            = [loki.process.kubernetes_pods_name.receiver]
      legacy_positions_file = "/tmp/positions.yaml"
    }
    
    loki.source.kubernetes_events "example" {
      // Only watch for events in the kube-system namespace.
      forward_to = [loki.process.kubernetes_pods_name.receiver]
    }
    
    loki.write "default" {
      endpoint {
              url = "http://svc-loki.tig.svc.cluster.local:3100/loki/api/v1/push"
      }
      external_labels = {}
    }


